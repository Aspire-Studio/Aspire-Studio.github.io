{"meta":{"title":"Aspires","subtitle":"幸せな新年","description":null,"author":"Ex10si0n","url":"https://aspire-studio.github.io"},"pages":[{"title":"关于我","date":"2017-08-15T09:38:59.000Z","updated":"2017-11-18T07:19:04.283Z","comments":true,"path":"about/index.html","permalink":"https://aspire-studio.github.io/about/index.html","excerpt":"","text":"简介¡Hola! Mellamo Ex10si0n /ɪkˈstenʃn/ 欢迎你点开本页面 12345 ______ __ __ __ _______ ______ __ _______ _________/\\ ___\\ /\\ \\/ / /\\ \\ /\\ __ \\ /\\ ___\\ /\\ \\ /\\ __ \\ /\\ ___ \\\\ \\ __\\ \\/ /\\ \\ \\ \\ \\ \\ \\ \\__\\ \\ \\ \\___ \\ \\ \\ \\ \\ \\ \\__\\ \\ \\ \\ \\\\ \\ \\ \\ \\_____\\ /_/\\ \\_\\ \\ \\_\\ \\ \\______\\ \\ \\_____\\ \\ \\_\\ \\ \\______\\ \\ \\__\\\\ \\__\\ \\/_____/ |_| \\/_/ \\/_/ \\/______/ \\/_____/ \\/_/ \\/______/ \\/__/ \\/__/ 博主为辽宁省东北育才双语学校的一名高二AFOer。热爱IT，前双语GeeksAllian社团社长。 花了点时间搞了个博客，想专注写一些算法的讲解和题解（写的很朴素，仅供参考），希望能够帮助到别人，同时我也在写博客的过程中进步。 关于本站建立于 2017 年 6 月，目前托管在 GitHub Pages 上。 联系方式邮箱：yzb.ex10si0n@icloud.com QQ：2879964188 Github：plz follow me on GitHub : Ex10si0n"},{"title":"友情链接","date":"2018-02-09T10:09:41.511Z","updated":"2018-02-09T09:34:47.843Z","comments":true,"path":"links/index.html","permalink":"https://aspire-studio.github.io/links/index.html","excerpt":"","text":""}],"posts":[{"title":"使用深度神经网络的图像分类","slug":"Pictures-classified","date":"2018-02-23T10:20:00.000Z","updated":"2018-02-23T14:47:09.800Z","comments":true,"path":"Pictures-classified/","link":"","permalink":"https://aspire-studio.github.io/Pictures-classified/","excerpt":"","text":"使用深度神经网络的图像分类介绍深度学习的最新进展使诸如图像和语音识别等任务成为可能。 深度学习：机器学习算法的一个子集，它非常擅长识别模式，但通常需要大量的数据。 深度学习擅长识别图像中的对象，因为它使用3层或更多层的人工神经网络实现，其中每层负责提取图像的一个或多个特征（稍后会详细介绍）。 神经网络：一种计算模型，其工作方式与人类大脑中的神经元相似。每个神经元接受一个输入，执行一些操作，然后将输出传递给下一个神经元。 神经网络表示（src） 我们将教计算机识别图像并将它们归类为以下10个类别之一： 为此，我们首先需要教给计算机一只猫，一只狗，一只鸟等在识别新物体之前的样子。计算机看到的猫越多，识别猫越好。这被称为监督学习。我们可以通过标记图像来执行这项任务，计算机将开始识别猫图片中存在的图案，这些图案缺少其他图案，并且将开始建立自己的认知。 我们将使用Python和TensorFlow来编写程序。TensorFlow是由Google创建的开源深度学习框架，它为开发人员提供了对每个神经元（在TensorFlow中称为“节点”）的粒度控制，因此您可以调整权重并实现最佳性能。TensorFlow拥有许多内置库（我们将用于图像分类的很少），并且拥有一个令人惊叹的社区，因此您可以找到几乎任何深度学习主题的开源实现。 所以让我们来做 - 让我们教计算机对图像进行分类！ 机器学习图像计算机能够对数字进行计算，并且无法以我们所做的方式解释图像。我们必须以某种方式将图像转换为计算机要理解的数字。 在图像处理中有两种常用的方法来做到这一点： 使用灰度： 图像将被转换为灰度（从白色到黑色的灰度范围），计算机将根据每个像素的黑暗程度分配一个值。所有数字都放入一个数组中，计算机在该数组上进行计算。这就是使用灰度显示数字8的方式： 图像转换为数字（src） 然后，我们将生成的数组提供给计算机： 结果数组（src） 2.使用RGB值： 颜色可以表示为RGB值（红色，绿色和蓝色的组合，范围从0到255）。计算机然后可以提取每个像素的RGB值并将结果放入数组中供解释。 当计算机解释新图像时，它将通过使用相同的技术将图像转换为数组，然后将数字模式与已知对象进行比较。计算机然后为每个班级分配信心分数。信心得分最高的班级通常是预测的班级。 简单句子（英语）“CNN”卷积神经网络（Convolutional Neural Networks，简称CNN）是用于提高图像分类精度的最流行的技术之一。 卷积神经网络：一种特殊类型的神经网络，其工作方式与常规神经网络相同，只是它在开始时具有卷积层 而不是将整个图像作为数字数组输入，图像被分解成多个图块，然后机器会尝试预测每个图块的内容。最后，计算机根据预测的所有图块来预测图片中的内容。这允许计算机并行操作并检测对象，而不管它在图像中的位置。 数据集我们决定使用CIFAR-10数据集，它包含60,000张大小为32 x 32像素的图像。数据集包含10个与每个包含6,000个图像的类互斥（不重叠）的类。图像很小，标签清晰，没有噪音，这使得数据集非常适合这项任务，而且预处理少得多。以下是从数据集中提取的几张照片： 步骤1：预处理首先，我们需要为数据添加一点变化，因为来自数据集的图像非常有组织，包含很少或没有噪音。我们将使用名为imgaug的Python库人为添加噪音。我们将随机对图像进行如下组合： 裁剪图像的部分 水平翻转图像 调整色调，对比度和饱和度 以上是结合上述效果的照片 以下是用于预处理图像的Python代码的样子： 12345678910111213141516171819202122232425262728293031323334353637def pre_process_image(image, training): # This function takes a single image as input, # and a boolean whether to build the training or testing graph. if training: # For training, add the following to the TensorFlow graph. # Randomly crop the input image. image = tf.random_crop(image, size=[img_size_cropped, img_size_cropped, num_channels]) # Randomly flip the image horizontally. image = tf.image.random_flip_left_right(image) # Randomly adjust hue, contrast and saturation. image = tf.image.random_hue(image, max_delta=0.05) image = tf.image.random_contrast(image, lower=0.3, upper=1.0) image = tf.image.random_brightness(image, max_delta=0.2) image = tf.image.random_saturation(image, lower=0.0, upper=2.0) # Some of these functions may overflow and result in pixel # values beyond the [0, 1] range. It is unclear from the # documentation of TensorFlow 0.10.0rc0 whether this is # intended. A simple solution is to limit the range. # Limit the image pixels between [0, 1] in case of overflow. image = tf.minimum(image, 1.0) image = tf.maximum(image, 0.0) else: # For training, add the following to the TensorFlow graph. # Crop the input image around the centre so it is the same # size as images that are randomly cropped during training. image = tf.image.resize_image_with_crop_or_pad(image, target_height=img_size_cropped, target_width=img_size_cropped) return image 第2步：分割我们的数据集使用整个大型数据集计算模型的梯度需要很长时间。因此，我们将在优化器的每次迭代期间使用一小批图像。批量大小通常为32或64，因为我们有相当多的图像，所以我们将使用64。然后将数据集分成包含50,000个图像的训练集和包含10,000个图像的测试集。 123456789101112131415train_batch_size = 64def random_batch(): # Number of images in the training-set. num_images = len(images_train) # Create a random index. idx = np.random.choice(num_images, size=train_batch_size, replace=False) # Use the random index to select random images and labels. x_batch = images_train[idx, :, :, :] y_batch = labels_train[idx, :] return x_batch, y_batch 第3步：建立卷积神经网络 神经网络体系结构 现在我们已经完成了预处理和分割我们的数据集，我们可以开始实施我们的神经网络。我们将有3个卷积层，最大为2 x 2。 最大池化：一种技术，用于通过获取网格的最大像素值来减小图像的尺寸。这也有助于减少过度配合并使模型更通用。下面的示例显示了2 x 2最大池的工作原理 2 x 2最大池（src） 之后，我们添加2个完全连接的图层。由于完全连接层的输入应该是二维的，并且卷积层的输出是四维的，所以我们需要它们之间的平坦化层。 完全连接的层的最后是softmax层。 参数识别是一项具有挑战性的任务，因为我们有很多参数需要调整。因此，我们阅读了大量资源并试图找出一种方法来实现它。但是，它似乎是基于经验。所以我们找到了Alex Krizhevsky制作的结构，他使用了这种结构并赢得了ImageNet LSVRC-2010的冠军。由于我们的工作比他的工作简单得多，所以我们只使用了3个卷积图层并在它们之间保持一个渐变。 结果现在我们有一个训练有素的神经网络，我们可以使用它！然后我们让计算机翻译了10,000张未知图像，并获得了78.4％（7844/10000）的准确率。有趣的是，不正确的预测看起来非常接近电脑的想法。 错误预测的示例 例如，以右上角的图片为例，图片看起来像坐在卡车上的一只猫，它足以让电脑预测它为卡车。 结论我们能够建立一个人造卷积神经网络，使用TensorFlow可以以78％的精度识别图像。我们通过预处理图像以使模型更通用，将数据集分成许多批次并最终构建和训练模型。","categories":[{"name":"深度学习","slug":"深度学习","permalink":"https://aspire-studio.github.io/categories/深度学习/"}],"tags":[{"name":"深度学习","slug":"深度学习","permalink":"https://aspire-studio.github.io/tags/深度学习/"}]},{"title":"Mac用户的福音——外置硬盘安装WinToGo","slug":"WTG","date":"2018-02-12T07:58:00.000Z","updated":"2018-02-12T11:18:33.294Z","comments":true,"path":"WTG/","link":"","permalink":"https://aspire-studio.github.io/WTG/","excerpt":"","text":"128GB的Mac确实很坑，升级完High Sierra之后如果想分区装系统是很麻烦的事情，就算是BootCamp分成了64GB+64GB的两个区，系统空间也不够啊，所以本文将思路从花很多钱更换大容量SSD转为外设硬盘/SSD使用Windows To Go运行在连接USB3.0的Mac上，实测系统运行速度还是很优秀的，可能是硬盘比较新吧。PS：我的方案是希捷1TB 7200转 3.5寸HDD，Orico的USB3.0硬盘盒(外接电源) PSP：USB3.0硬盘会和波长为2.4Ghz的Wi-Fi产生干扰，建议将Wi-Fi换成5Ghz的模式，或者双频也行， 需要的一些资源：硬盘/SSD/移动硬盘 官方企业版镜像下载：来自MSDN 企业版64位 或 来自MSDN 企业版32位（复制链接迅雷下载）这里说一下，WTG必须用企业版，想要有应用商店的不要选择LTSB版本，这两个链接是Creative Update版本的。 Mac的Windows驱动：在BootCamp（High Sierra之后叫做转换助理）下载 如果你手头有另一台企业版Windows10则直接跳过下一步 虚拟机安装Windows10企业版因为安装WindowsToGo需要在一台Windows电脑上操作，所以可以用刚刚下载好的镜像跑一个虚拟机（推荐使用VMWare Fusion） 来自微软的寒暄… 感受一下这么6的画图3D 安装装载下载好的镜像文件 在装载后的镜像中sources文件夹下找到 install.wim 并拷贝到桌面，然后进入Windows搜索windows to go 连接硬盘，注意，需要格式化硬盘，所以建议您提前做好备份。 添加搜索位置（不明白为什么微软设计的不能直接选择文件…） 搜索位置就是刚刚把install.wim拷贝出来的目录（因为虚拟机设置的是桌面和Mac同步，所以在Mac OS拷贝的文件在虚拟机上自然能直接使用的），等待… 选否就行了 安装完成，重新启动电脑。 开机后按option键 选择EFI Boot，等待Windows初始化结束，电脑会重新启动一次，按option键，选择EFI Boot ，就会进入新系统设置（连键盘和鼠标），设置完后接着听微软念诗寒暄… 进入系统首先安装好苹果的驱动程序（这个驱动官方好久没更新了…）安装完驱动需要重启到Windows系统，然后就可以开机使用了。 需要更好的体验可以登陆微软账号，最好要关闭系统更新（因为我没有成功的更新过WindowsToGo），激活Windows… PS，在Windows下苹果的Magic Mouse体验并不是很好。)","categories":[{"name":"教程","slug":"教程","permalink":"https://aspire-studio.github.io/categories/教程/"}],"tags":[{"name":"Windows","slug":"Windows","permalink":"https://aspire-studio.github.io/tags/Windows/"}]},{"title":"里程碑","slug":"dir","date":"2018-02-09T10:20:00.000Z","updated":"2018-02-10T04:15:26.876Z","comments":true,"path":"dir/","link":"","permalink":"https://aspire-studio.github.io/dir/","excerpt":"","text":"正如里程碑一样​ 回忆起学OI的日子，我觉得留给我最大的收获就是对于Coding乃至计算机这个领域有了一层认识，还有就是建站方面也涉及一部分，这个站点的目的呢，我也是想写一些很高质量的文章，ex10si0n.com 中大多数是学OI时刷题的题解，以及一些算法的学习心得，有几篇文章还是有参考意义的，但大多数都感觉只是在做题而已。这也是我开设这个站点的意义。 闲聊​ 研究学问的话，其实也可以不是那么无聊，我想在本站和大家一起分享我现在学习的我认为有意思的东西，不想我们被很难很多的知识困住，其实学东西真的很有趣。 ​ 学习算法也是我的爱好之一，可是因为课业的原因，再去用很长时间学算法不是很合适了，我希望我以后有时间了也能坚持学下去，毕竟这个高考定人生的时代，想学点有意思的东西也挺不容易的。所以，我的这些文章也是在课余休息时间码出来的，有bug的话请大家原谅。 ​ 我的兴趣很广泛啦，可以用Geeks来形容，喜欢各式各样的新鲜事物，也热爱工业设计和编程，其实，也都是兴趣使然吧。 什么是 “Aspires”​ 这个名字是我用来命名 Aspire Studio 的，我中二的时候就有了这个梦想，想搞一个工作室，到现在我也有了许多原创的出自 Aspire Studio 的设计作品，有的是纸稿，有的已经建好模了，也算是回归初心吧。 ​ Aspires 是 热爱 渴望 冀 的意思，兴趣所带来的热爱，确实让我感觉到很幸福，所以也想用这个名字来命名本站，其实之前还想过许多别的，例如：Heurisitic | Dimension | Aurora 之类的，对比之下 Aspires 感觉更加贴近吧。 ​ 不知道能不能说是 Aspires 影响了我很多的观念，但是对于新知的渴望的的确确让我感觉很充实，所以呢，这个也就是我的 Aspires 吧。 所以当你看到这篇文章的网址时1dir 它代表着未来的方向，确定好方向就要大步向前。","categories":[{"name":"开发","slug":"开发","permalink":"https://aspire-studio.github.io/categories/开发/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://aspire-studio.github.io/tags/前端/"}]},{"title":"Hello Aspires.cc","slug":"hello-world","date":"2018-02-02T11:44:00.000Z","updated":"2018-02-09T10:18:11.049Z","comments":true,"path":"hello-world/","link":"","permalink":"https://aspire-studio.github.io/hello-world/","excerpt":"","text":"1Hello world 2018年2月2日 — 总算是搭建好了Aspires.cc . 本站建立在Github Pages上，使用优雅的hexo生成器 . Github Pages搭建心得用来做静态网站，免费很赞，而且速度很快的 . 搭建起来也不算太耗时，有强大的博客软件的支持 . hexo的安装1npm install hexo-cli -g 然后折腾折腾配置文件，配置好git，折腾半天就能弄完. 简单介绍你好！我是 Ex10si0n . 来自伟大的 PRC . 我热爱设计和开发 . 博客请见 Ex10si0n的Coding实验室 12345 ______ __ __ __ _______ ______ __ _______ _________/\\ ___\\ /\\ \\/ / /\\ \\ /\\ __ \\ /\\ ___\\ /\\ \\ /\\ __ \\ /\\ ___ \\\\ \\ __\\ \\/ /\\ \\ \\ \\ \\ \\ \\ \\__\\ \\ \\ \\___ \\ \\ \\ \\ \\ \\ \\__\\ \\ \\ \\ \\\\ \\ \\ \\ \\_____\\ /_/\\ \\_\\ \\ \\_\\ \\ \\______\\ \\ \\_____\\ \\ \\_\\ \\ \\______\\ \\ \\__\\\\ \\__\\ \\/_____/ |_| \\/_/ \\/_/ \\/______/ \\/_____/ \\/_/ \\/______/ \\/__/ \\/__/","categories":[{"name":"开发","slug":"开发","permalink":"https://aspire-studio.github.io/categories/开发/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://aspire-studio.github.io/tags/前端/"}]}]}